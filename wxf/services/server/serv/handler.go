package serv

import (
	"bytes"
	"github.com/golang/protobuf/proto"
	"github.com/sirupsen/logrus"
	"github.com/wangxuefeng90923/wxf"
	"github.com/wangxuefeng90923/wxf/container"
	"github.com/wangxuefeng90923/wxf/wire"
	"github.com/wangxuefeng90923/wxf/wire/pkt"
	"strings"
	"time"
)

var log = logrus.WithFields(logrus.Fields{
	"service": wire.SNChat,
	"pkg":     "serv",
})

type ServeHandler struct {
	r          *wxf.Router
	cache      wxf.SessionStorage
	dispatcher *ServerDispatcher
}

func (h *ServeHandler) Disconnect(id string) error {
	logrus.Warnf("close event of %s", id)
	return nil
}

func (h *ServeHandler) Receive(agent wxf.Agent, payload []byte) {
	buf := bytes.NewBuffer(payload)
	packet, err := pkt.MustReadLogicPkt(buf)
	if err != nil {
		return
	}
	var session *pkt.Session
	if packet.Command == wire.CommandLoginSignIn {
		server, _ := packet.GetMeta(wire.MetaDestChannels)
		session = &pkt.Session{
			ChannelId: packet.ChannelId,
			GateId:    server.(string),
			Tags:      []string{"AutoGenerated"},
		}
	} else {
		// TODO regarding session
		session, err = h.cache.Get(packet.GetChannelId())
		if err != nil {
			if err == wxf.ErrSessionNil {
				_ = RespErr(agent, packet, pkt.Status_SessionNotFound)
				return
			} else {
				_ = RespErr(agent, packet, pkt.Status_SystemException)
				return
			}
		}
	}
	logrus.Debugf("recv message from %s %s", session, &packet.Header)
	err = h.r.Serve(packet, h.dispatcher, h.cache, session)
	if err != nil {
		log.Warn(err)
	}
}

func RespErr(ag wxf.Agent, p *pkt.LogicPkt, status pkt.Status) error {
	packet := pkt.NewFrom(&p.Header)
	packet.Status = status
	packet.Flag = pkt.Flag_Response
	p.AddStringMeta(wire.MetaDestChannels, p.Header.ChannelId)
	return container.Push(ag.ID(), p)
}

func (h *ServeHandler) Accept(conn wxf.Conn, timeout time.Duration) (string, error) {
	_ = conn.SetReadDeadline(time.Now().Add(timeout))
	frame, err := conn.ReadFrame()
	if err != nil {
		return "", err
	}

	var req pkt.InnerHandshakeReq
	_ = proto.Unmarshal(frame.GetPayload(), &req)
	log.Info("Accept --- ", req.ServiceId)

	return req.ServiceId, nil
}

func NewServeHandler(r *wxf.Router, cache wxf.SessionStorage) *ServeHandler {
	return &ServeHandler{
		r:          r,
		cache:      cache,
		dispatcher: &ServerDispatcher{},
	}
}

type ServerDispatcher struct {
}

func (h *ServerDispatcher) Push(gateway string, channels []string, p *pkt.LogicPkt) error {
	p.AddStringMeta(wire.MetaDestChannels, strings.Join(channels, ","))
	return container.Push(gateway, p)
}
